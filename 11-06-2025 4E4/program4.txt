import java.util.HashSet;
public class App {
    public static void main(String[] args) {
        Graph graph = new Graph(4, false);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(0, 3);
        graph.printGraph();
    }
}
class Edge {
    int src;
    int dest;
    int weight;
    Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }
    Edge(int src, int dest) {
        this(src, dest, 1); 
    }
    public String toString() {
        return "(" + src + " -> " + dest + ", weight=" + weight + ")";
    }
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!(obj instanceof Edge)) return false;
        Edge other = (Edge) obj;
        return src == other.src && dest == other.dest && weight == other.weight;
    }
    public int hashCode() {
        return Integer.hashCode(src) * 31 + Integer.hashCode(dest) * 17 + Integer.hashCode(weight);
    }
}
class Graph {
    HashSet<Edge> graph;
    int vertices;
    boolean isDirected;

    Graph(int vertices, boolean isDirected) {
        this.vertices = vertices;
        this.isDirected = isDirected;
        graph = new HashSet<>();
    }
    public void addEdge(int src, int dest) {
        if (isValid(src, dest)) {
            Edge e = new Edge(src, dest);
            graph.add(e);
            if (!isDirected) {
                Edge e2 = new Edge(dest, src);
                graph.add(e2);
            }
        } else {
            System.out.println("Invalid source or destination");
        }
    }
    public void addEdge(int src, int dest, int weight) {
        if (isValid(src, dest)) {
            Edge e = new Edge(src, dest, weight);
            graph.add(e);
            if (!isDirected) {
                Edge e2 = new Edge(dest, src, weight);
                graph.add(e2);
            }
        } else {
            System.out.println("Invalid source or destination");
        }
    }
    public boolean isValid(int src, int dest) {
        return src >= 0 && dest >= 0 && src < vertices && dest < vertices;
    }

    public void printGraph() {
        System.out.println("Edges in the graph:");
        for (Edge e : graph) {
            System.out.println(e);
        }
    }
}
